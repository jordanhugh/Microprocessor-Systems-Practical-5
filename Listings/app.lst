


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             InitialisationAndMain, CODE, RE
ADONLY
    2 00000000                 IMPORT           main
    3 00000000                 EXPORT           start
    4 00000000         start
    5 00000000         
    6 00000000         ; Setup GPIO
    7 00000000         ;IO1DIR equ  0xE0028018
    8 00000000         ;IO1SET equ  0xE0028014
    9 00000000         ;IO1CLR equ  0xE002801C
   10 00000000         ;IO1PIN equ  0xE0028010
   11 00000000         
   12 00000000 E59F1414        ldr              r1, =IO1DIR
   13 00000004 E3A0280F        ldr              r2,=0x000f0000 ;select P1.19--P
                                                            1.16
   14 00000008 E5812000        str              r2,[r1]     ;make them outputs
   15 0000000C E59F140C        ldr              r1,=IO1SET
   16 00000010 E5812000        str              r2,[r1]     ;set them to turn t
                                                            he LEDs off
   17 00000014 E59F240C        ldr              r2,=IO1CLR
   18 00000018         
   19 00000018         ; Setup User Mode
   20 00000018 00000010 
                       Mode_USR
                               equ              0x10
   21 00000018         
   22 00000018         ; Definitions  -- references to 'UM' are to the User Man
                       ual.
   23 00000018         ; Timer Stuff -- UM, Table 173
   24 00000018 E0004000 
                       T0      equ              0xE0004000  ; Timer 0 Base Addr
                                                            ess
   25 00000018 E0008000 
                       T1      equ              0xE0008000
   26 00000018 00000000 
                       IR      equ              0
   27 00000018 00000004 
                       TCR     equ              4
   28 00000018 00000014 
                       MCR     equ              0x14
   29 00000018 00000018 
                       MR0     equ              0x18
   30 00000018         
   31 00000018 00000002 
                       TimerCommandReset
                               equ              2
   32 00000018 00000001 
                       TimerCommandRun
                               equ              1
   33 00000018 00000003 
                       TimerModeResetAndInterrupt
                               equ              3
   34 00000018 00000001 
                       TimerResetTimer0Interrupt
                               equ              1
   35 00000018 000000FF 
                       TimerResetAllInterrupts
                               equ              0xFF
   36 00000018         



ARM Macro Assembler    Page 2 


   37 00000018         ; VIC Stuff -- UM, Table 41
   38 00000018 FFFFF000 
                       VIC     equ              0xFFFFF000
   39 00000018 00000010 
                       IntEnable
                               equ              0x10
   40 00000018 00000030 
                       VectAddr
                               equ              0x30
   41 00000018 00000100 
                       VectAddr0
                               equ              0x100
   42 00000018 00000200 
                       VectCtrl0
                               equ              0x200
   43 00000018         
   44 00000018 00000004 
                       Timer0ChannelNumber
                               equ              4           ; UM, Table 63
   45 00000018 00000010 
                       Timer0Mask
                               equ              1 <<Timer0ChannelNumber 
                                                            ; UM, Table 63
   46 00000018 00000005 
                       IRQslot_en
                               equ              5           ; UM, Table 58
   47 00000018         
   48 00000018         ; Initialisation code
   49 00000018         ; Initialise the VIC
   50 00000018 E59F03C4        ldr              r0, =VIC    ; looking at you, V
                                                            IC!
   51 0000001C         
   52 0000001C E59F13B4        ldr              r1, =irqhan
   53 00000020 E5801100        str              r1, [r0, #VectAddr0] ; associat
                                                            e our interrupt han
                                                            dler with Vectored 
                                                            Interrupt 0
   54 00000024         
   55 00000024 E3A01024        mov              r1, #Timer0ChannelNumber+(1<<IR
Qslot_en)
   56 00000028 E5801200        str              r1, [r0, #VectCtrl0] ; make Tim
                                                            er 0 interrupts the
                                                             source of Vectored
                                                             Interrupt 0
   57 0000002C         
   58 0000002C E3A01010        mov              r1, #Timer0Mask
   59 00000030 E5801010        str              r1, [r0, #IntEnable] ; enable T
                                                            imer 0 interrupts t
                                                            o be recognised by 
                                                            the VIC
   60 00000034         
   61 00000034 E3A01000        mov              r1, #0
   62 00000038 E5801030        str              r1, [r0, #VectAddr] ; remove an
                                                            y pending interrupt
                                                             (may not be needed
                                                            )
   63 0000003C         
   64 0000003C         ; Initialise Timer 0
   65 0000003C E59F03A8        ldr              r0, =T0     ; looking at you, T



ARM Macro Assembler    Page 3 


                                                            imer 0!
   66 00000040         
   67 00000040 E3A01002        mov              r1, #TimerCommandReset
   68 00000044 E5801004        str              r1, [r0, #TCR]
   69 00000048         
   70 00000048 E3A010FF        mov              r1, #TimerResetAllInterrupts
   71 0000004C E5801000        str              r1, [r0, #IR]
   72 00000050         
   73 00000050 E59F1398        ldr              r1, =(14745600/200) - 1 ; 5 ms 
                                                            = 1/200 second
   74 00000054 E5801018        str              r1, [r0, #MR0]
   75 00000058         
   76 00000058 E3A01003        mov              r1, #TimerModeResetAndInterrupt
   77 0000005C E5801014        str              r1, [r0, #MCR]
   78 00000060         
   79 00000060 E3A01001        mov              r1, #TimerCommandRun
   80 00000064 E5801004        str              r1, [r0, #TCR]
   81 00000068         
   82 00000068         ; Setup Stack for each Thread
   83 00000068 E3A00000        ldr              r0, =0x00000000
   84 0000006C E3A01000        ldr              r1, =0x00000000
   85 00000070 E3A02000        ldr              r2, =0x00000000
   86 00000074 E3A03000        ldr              r3, =0x00000000
   87 00000078 E3A04000        ldr              r4, =0x00000000
   88 0000007C E3A05000        ldr              r5, =0x00000000
   89 00000080 E3A06000        ldr              r6, =0x00000000
   90 00000084 E3A07000        ldr              r7, =0x00000000
   91 00000088 E3A08000        ldr              r8, =0x00000000
   92 0000008C E59F9348        ldr              r9, =led_thread
   93 00000090         
   94 00000090 E59FA348        ldr              r10, =led_sp
   95 00000094 E59AB000        ldr              r11, [r10]
   96 00000098 E92B03FF        stmfd            r11!, {r0-r8, r9}
   97 0000009C E58AB000        str              r11, [r10]
   98 000000A0         
   99 000000A0 E59F9340        ldr              r9, =calc_thread
  100 000000A4         
  101 000000A4 E59FA348        ldr              r10, =calc_sp
  102 000000A8 E59AB000        ldr              r11, [r10]
  103 000000AC E92B03FF        stmfd            r11!, {r0-r8, r9}
  104 000000B0 E58AB000        str              r11, [r10]
  105 000000B4         
  106 000000B4 E321F010        msr              cpsr_c, #Mode_USR
  107 000000B8 EAFFFFFE 
                       loop    b                loop
  108 000000BC         
  109 000000BC         
  110 000000BC         
  111 000000BC         led_thread
  112 000000BC         ;GPIO Setup
  113 000000BC E0028008 
                       IO0DIR  equ              0xE0028008
  114 000000BC E0028004 
                       IO0SET  equ              0xE0028004
  115 000000BC E002800C 
                       IO0CLR  equ              0xE002800C
  116 000000BC         
  117 000000BC E59F0340        ldr              r0, =IO0DIR
  118 000000C0 E3A01826        ldr              r1, =0x00260000 ; Select P0.17,



ARM Macro Assembler    Page 4 


                                                             P0.18, P0.21
  119 000000C4 E5801000        str              r1, [r0]    ; Make them outputs
                                                            
  120 000000C8 E59F0338        ldr              r0, =IO0SET
  121 000000CC E5801000        str              r1, [r0]    ; Set them to turn 
                                                            the LEDs off
  122 000000D0 E59F1334        ldr              r1, =IO0CLR
  123 000000D4         
  124 000000D4         ; From here, initialisation is finished, so it should be
                        the main body of the main program
  125 000000D4 E59F531C        ldr              r5, =timer
  126 000000D8 E5957000        ldr              r7, [r5]
  127 000000DC E28770C8        add              r7, r7, #(1000/5)
  128 000000E0 E59F2314 
                       wh1     ldr              r2, =leds
  129 000000E4 E3A04008        mov              r4, #8
  130 000000E8 E4923004        ldr              r3, [r2], #4
  131 000000EC E5813000        str              r3, [r1]
  132 000000F0 E59F5300 
                       dowh1   ldr              r5, =timer
  133 000000F4 E5956000        ldr              r6, [r5]
  134 000000F8 E1560007        cmp              r6, r7
  135 000000FC 3A000006        bcc              endif4
  136 00000100 E1A07006        mov              r7, r6
  137 00000104 E28770C8        add              r7, r7, #(1000/5)
  138 00000108 E5856000        str              r6, [r5]
  139 0000010C E2444001        sub              r4, r4, #1
  140 00000110 E5803000        str              r3, [r0]
  141 00000114 E4923004        ldr              r3, [r2], #4
  142 00000118 E5813000        str              r3, [r1]
  143 0000011C E3540000 
                       endif4  cmp              r4, #0
  144 00000120 1AFFFFF2        bne              dowh1
  145 00000124 EAFFFFED        b                wh1
  146 00000128         ; Main program execution will never drop below the state
                       ment above.
  147 00000128         
  148 00000128         
  149 00000128         
  150 00000128         calc_thread
  151 00000128         ;Setup GPIO
  152 00000128 E0028018 
                       IO1DIR  equ              0xE0028018
  153 00000128 E0028014 
                       IO1SET  equ              0xE0028014
  154 00000128 E002801C 
                       IO1CLR  equ              0xE002801C
  155 00000128 E0028010 
                       IO1PIN  equ              0xE0028010
  156 00000128         
  157 00000128         ; Setup Buttons
  158 00000128 00000014 
                       incr    equ              20
  159 00000128 00000015 
                       decr    equ              21
  160 00000128 00000016 
                       addit   equ              22
  161 00000128 00000017 
                       subtr   equ              23



ARM Macro Assembler    Page 5 


  162 00000128 FFFFFFEA 
                       clear   equ              -22
  163 00000128 FFFFFFE9 
                       allclear
                               equ              -23
  164 00000128         
  165 00000128         ; Setup State Machine States
  166 00000128 00000000 
                       initial_state
                               equ              0
  167 00000128 00000001 
                       getnum_state
                               equ              1
  168 00000128 00000002 
                       getop_state
                               equ              2
  169 00000128         
  170 00000128         ; Setup Calculator Operators
  171 00000128 00000000 
                       op      equ              0
  172 00000128 00000001 
                       op_add  equ              1
  173 00000128 00000002 
                       op_sub  equ              2
  174 00000128         
  175 00000128         ;Press Times
  176 00000128 00004E20 
                       regpress
                               equ              20000       ; Short press time
  177 00000128 00030D40 
                       longpress
                               equ              200000      ; Long press time
  178 00000128         
  179 00000128         ; Initialise the LEDs
  180 00000128 E59F12EC        ldr              r1, =IO1DIR ;
  181 0000012C E3A0280F        ldr              r2, =0x000f0000 ; Select P1.19-
                                                            -P1.16
  182 00000130 E5812000        str              r2, [r1]    ; Set as outputs
  183 00000134         
  184 00000134         clear_all
  185 00000134 E3A01000        mov              r1, #initial_state ; Set r1 to 
                                                            initial state
  186 00000138 E3A02000        mov              r2, #0      ; Set all registers
                                                             to 0
  187 0000013C E3A03000        mov              r3, #0      ;
  188 00000140 E3A04000        mov              r4, #op     ;
  189 00000144 E3A00000        mov              r0, #0      ;
  190 00000148 EB00006B        bl               update_leds ; Set all LEDS off
  191 0000014C         
  192 0000014C         main_loop
  193 0000014C EB000078        bl               getbut      ; Get the next key
  194 00000150 E3A05000        mov              r5, #initial_state ; 
  195 00000154 E1510005        cmp              r1, r5      ; Check if in initi
                                                            al state
  196 00000158 1A00000D        bne              get_number  ; If not, get numbe
                                                            r
  197 0000015C         
  198 0000015C E3A05014        mov              r5, #incr   ; 
  199 00000160 E1550000        cmp              r5, r0      ; If "+" was not pr



ARM Macro Assembler    Page 6 


                                                            essed
  200 00000164 0A000006        beq              elseifincr  ; Else branch if it
                                                             was pressed
  201 00000168 E3A05015        mov              r5, #decr   ; If "-" was not pr
                                                            essed
  202 0000016C E1550000        cmp              r5,r0       ; Else branch back 
                                                            to the beginning of
                                                             main_loop 
  203 00000170 1AFFFFF5        bne              main_loop   ;
  204 00000174 E2433001        sub              r3, #1      ; x = x - 1
  205 00000178 E1A00003        mov              r0, r3      ; 
  206 0000017C E3A01001        mov              r1, #getnum_state ; Change from
                                                             initial to getnum 
                                                            state
  207 00000180 EA00005D        b                update_leds ; Update LEDS
  208 00000184         elseifincr
  209 00000184 E2833001        add              r3, #1      ;
  210 00000188 E1A00003        mov              r0, r3      ;
  211 0000018C E3A01001        mov              r1, #getnum_state ;
  212 00000190 EA000059        b                update_leds ;
  213 00000194         
  214 00000194         get_number
  215 00000194 E3A05001        mov              r5, #getnum_state ;
  216 00000198 E1510005        cmp              r1, r5      ;
  217 0000019C 1A000023        bne              get_operator ;
  218 000001A0         
  219 000001A0 E3A05014        mov              r5, #incr   ;
  220 000001A4 E1550000        cmp              r5, r0      ;
  221 000001A8 1A000002        bne              elseifneg0  ;
  222 000001AC E2833001        add              r3, #1      ;
  223 000001B0 E1A00003        mov              r0, r3      ;
  224 000001B4 EA000050        b                update_leds ;
  225 000001B8         elseifneg0
  226 000001B8 E3A05015        mov              r5, #decr   ;
  227 000001BC E1550000        cmp              r5, r0      ;
  228 000001C0 1A000002        bne              elseifsub0  ;
  229 000001C4 E2433001        sub              r3, #1      ;
  230 000001C8 E1A00003        mov              r0, r3      ;
  231 000001CC EA00004A        b                update_leds ;
  232 000001D0         elseifsub0
  233 000001D0 E3A05017        mov              r5, #subtr  ;
  234 000001D4 E1550000        cmp              r5, r0      ;
  235 000001D8 1A000003        bne              elseifadd0  ;
  236 000001DC EB000033        bl               complete_operation ;
  237 000001E0 E3A04002        mov              r4, #op_sub ;
  238 000001E4 E3A01002        mov              r1, #getop_state ;
  239 000001E8 EAFFFFD7        b                main_loop   ;
  240 000001EC         elseifadd0
  241 000001EC E3A05016        mov              r5, #addit  ;
  242 000001F0 E1550000        cmp              r5, r0      ;
  243 000001F4 1A000003        bne              elseifclear0 ;
  244 000001F8 EB00002C        bl               complete_operation ;
  245 000001FC E3A04001        mov              r4, #op_add ;  
  246 00000200 E3A01002        mov              r1, #getop_state ;
  247 00000204 EAFFFFD0        b                main_loop   ;
  248 00000208         elseifclear0
  249 00000208 E3E05015        mov              r5,#clear   ;
  250 0000020C E1550000        cmp              r5,r0       ;
  251 00000210 1A000002        bne              elseifallclear0 ;



ARM Macro Assembler    Page 7 


  252 00000214 E3A03000        mov              r3,#0       ;
  253 00000218 E1A00003        mov              r0,r3       ;
  254 0000021C EA000036        b                update_leds ;
  255 00000220         elseifallclear0
  256 00000220 E3E05016        mov              r5, #allclear ;
  257 00000224 E1550000        cmp              r5, r0      ;
  258 00000228 1AFFFFC7        bne              main_loop   ;
  259 0000022C EAFFFFC0        b                clear_all   ;
  260 00000230         get_operator
  261 00000230 E3A05002        mov              r5, #getop_state ;
  262 00000234 E1510005        cmp              r1, r5      ;
  263 00000238 1AFFFFC3        bne              main_loop   ;
  264 0000023C E3A05014        mov              r5, #incr   ;
  265 00000240 E1550000        cmp              r5, r0      ;
  266 00000244 1A000003        bne              elseifneg1  ;
  267 00000248 E3A01001        mov              r1,#getnum_state ;
  268 0000024C E3A03000        mov              r3,#0       ;
  269 00000250 E1A00003        mov              r0,r3       ;
  270 00000254 EA000028        b                update_leds ;
  271 00000258         elseifneg1
  272 00000258 E3A05015        mov              r5,#decr    ;
  273 0000025C E1550000        cmp              r5,r0       ;
  274 00000260 1A000003        bne              elseifsub1  ;
  275 00000264 E3A01001        mov              r1,#getnum_state ;
  276 00000268 E3A03000        mov              r3,#0       ;
  277 0000026C E1A00003        mov              r0,r3       ;
  278 00000270 EA000021        b                update_leds ;
  279 00000274         elseifsub1
  280 00000274 E3A05017        mov              r5,#subtr   ;
  281 00000278 E1550000        cmp              r5,r0       ;
  282 0000027C 1A000001        bne              elseifadd1  ;
  283 00000280 E3A04002        mov              r4,#op_sub  ;
  284 00000284 EAFFFFB0        b                main_loop   ;
  285 00000288         elseifadd1
  286 00000288 E3A05016        mov              r5,#addit   ;
  287 0000028C E1550000        cmp              r5,r0       ;
  288 00000290 1A000001        bne              elseifclear1 ;
  289 00000294 E3A04001        mov              r4,#op_add  ;
  290 00000298 EAFFFFAB        b                main_loop   ;
  291 0000029C         elseifclear1
  292 0000029C E3E05016        mov              r5,#allclear ;
  293 000002A0 E1550000        cmp              r5,r0       ;
  294 000002A4 1AFFFFA8        bne              main_loop   ;
  295 000002A8 EAFFFFA1        b                clear_all   ;  
  296 000002AC EAFFFFFE 
                       stop    b                stop
  297 000002B0         
  298 000002B0         complete_operation
  299 000002B0 E92D4001        stmfd            sp!, {r0, lr} ;
  300 000002B4 E3A00000        mov              r0, #op     ;
  301 000002B8 E1540000        cmp              r4, r0      ;
  302 000002BC 1A000001        bne              elseifadd2  ;
  303 000002C0 E1A02003        mov              r2, r3      ;
  304 000002C4 EA000008        b                elseiferror2 ;
  305 000002C8 E3A00001 
                       elseifadd2
                               mov              r0, #op_add ;
  306 000002CC E1540000        cmp              r4, r0      ;
  307 000002D0 1A000001        bne              elseifsub2  ;



ARM Macro Assembler    Page 8 


  308 000002D4 E0822003        add              r2, r3      ;
  309 000002D8 EA000003        b                elseiferror2 ;
  310 000002DC E3A00002 
                       elseifsub2
                               mov              r0, #op_sub ;
  311 000002E0 E1540000        cmp              r4, r0      ;
  312 000002E4 1A000000        bne              elseiferror2 ;
  313 000002E8 E0422003        sub              r2, r3      ;
  314 000002EC         elseiferror2
  315 000002EC E1A00002        mov              r0, r2      ;
  316 000002F0 EB000001        bl               update_leds ;
  317 000002F4 E8BD4001        ldmfd            sp!, {r0, lr} ;
  318 000002F8 E12FFF1E        bx               lr          ;
  319 000002FC         
  320 000002FC         update_leds
  321 000002FC E92D4006        stmfd            sp!, {r1-r2, lr} ;
  322 00000300 E3A0280F        ldr              r2, =0x000f0000 ; Select P1.19-
                                                            -P1.16
  323 00000304 E59F1114        ldr              r1, =IO1SET ;
  324 00000308 E5812000        str              r2, [r1]    ; Set the bit -> tu
                                                            rn off the LED
  325 0000030C E1A02000        mov              r2, r0      ;
  326 00000310 E202200F        and              r2, #0xF    ; Remove any carry
  327 00000314 E59F10E4        ldr              r1, =revbits ;
  328 00000318 E0811002        add              r1, r2      ;
  329 0000031C E5912000        ldr              r2, [r1]    ;
  330 00000320 E1A02802        mov              r2, r2, lsl #16 ;
  331 00000324 E59F10FC        ldr              r1, =IO1CLR ;
  332 00000328 E5812000        str              r2, [r1]    ; Clear the bit -> 
                                                            turn on the LED
  333 0000032C E8BD4006        ldmfd            sp!, {r1-r2, lr} ;
  334 00000330 E12FFF1E        bx               lr          ;
  335 00000334         
  336 00000334         getbut
  337 00000334 E92D41FE        stmfd            sp!, {r1-r8, lr} ;
  338 00000338 E3A0160F        ldr              r1, =0x00f00000 ; Mask all keys
                                                            
  339 0000033C E59F20E8        ldr              r2, =IO1PIN ;
  340 00000340 E59F80E8        ldr              r8, =regpress ; Checks if the b
                                                            utton was pressed f
                                                            or a short time
  341 00000344         nobutpress                           ;
  342 00000344 E3A03000        mov              r3, #0      ; Number of keys pr
                                                            essed
  343 00000348         checkallbuts0                        ;
  344 00000348 E59F40C0        ldr              r4, =buts   ;
  345 0000034C E3A05004        mov              r5, #4      ; Number of buttons
                                                            
  346 00000350 E5926000        ldr              r6, [r2]    ;
  347 00000354 E0066001        and              r6, r6, r1  ; Mask everything e
                                                            xcept for buttons
  348 00000358         checkallbuts1                        ;
  349 00000358 E5947000        ldr              r7, [r4]    ;
  350 0000035C E2844008        add              r4, #8      ; Check next button
                                                            
  351 00000360 E1560007        cmp              r6, r7      ; 
  352 00000364 0A000002        beq              countpress  ;
  353 00000368 E2555001        subs             r5, #1      ;
  354 0000036C 1AFFFFF9        bne              checkallbuts1 ; Check if any ot



ARM Macro Assembler    Page 9 


                                                            her buttons were pr
                                                            essed
  355 00000370 EAFFFFF3        b                nobutpress  ; Return if no butt
                                                            on was pressed
  356 00000374         countpress                           ;
  357 00000374 E2833001        add              r3, #1      ;
  358 00000378 E1530008        cmp              r3, r8      ; Checks if the but
                                                            ton was pressed for
                                                             long enough
  359 0000037C 1AFFFFF1        bne              checkallbuts0 ;
  360 00000380 E2444004        sub              r4, #4      ; Point to Index
  361 00000384 E5940000        ldr              r0,[r4]     ; Load index into R
                                                            0
  362 00000388 E59F50A8        ldr              r5, =longpress ;
  363 0000038C         keepcounting0                        ;
  364 0000038C E3A04000        mov              r4, #0      ;
  365 00000390         keepcounting1                        ;
  366 00000390 E5926000        ldr              r6,[r2]     ;
  367 00000394 E0066001        and              r6, r6, r1  ; Mask everything e
                                                            xcept for buttons
  368 00000398 E1560007        cmp              r6, r7      ; 
  369 0000039C 1A000003        bne              endif0      ; 
  370 000003A0 E1530005        cmp              r3, r5      ; Check if its a lo
                                                            ng press
  371 000003A4 0A000000        beq              endif1      ;
  372 000003A8 E2833001        add              r3, #1      ; Keep counting oth
                                                            erwise...
  373 000003AC EAFFFFF6 
                       endif1  b                keepcounting0 
                                                            ; Keep counting...
  374 000003B0 E1560001 
                       endif0  cmp              r6, r1      ; 
  375 000003B4 1AFFFFE2        bne              nobutpress  ; Start again
  376 000003B8 E2844001        add              r4, #1      ;       
  377 000003BC E1540008        cmp              r4, r8      ; Check if reg time
                                                             has elapsed
  378 000003C0 1AFFFFF2        bne              keepcounting1 
                                                            ; Keep counting...
  379 000003C4 E1530005        cmp              r3, r5      ;
  380 000003C8 1A000000        bne              endif2      ;
  381 000003CC E2600000        rsb              r0, #0      ;
  382 000003D0 E8BD41FE 
                       endif2  ldmfd            sp!, {r1-r8, lr} ;
  383 000003D4 E12FFF1E        bx               lr          ;
  384 000003D8         
  385 000003D8         
  386 000003D8         
  387 000003D8 00000000 
              00000000 
              00000000 
              FFFFF000 
              00000000 
              E0004000 
              00011FFF 
              00000000 
              00000000 
              00000000 
              00000000 
              E0028008 



ARM Macro Assembler    Page 10 


              E0028004 
              E002800C 
              00000000 
              00000000 
              00000000 
              E0028018 
              E0028014 
              00000000 
              E002801C 
              E0028010 
              00004E20 
              00000000 
              00030D40         AREA             InterruptStuff, CODE, READONLY
  388 00000000 E24EE004 
                       irqhan  sub              lr, lr, #4
  389 00000004         ; this is the body of the interrupt handler
  390 00000004         
  391 00000004         ; here you'd put the unique part of your interrupt handl
                       er
  392 00000004         ; all the other stuff is "housekeeping" to save register
                       s and acknowledge interrupts
  393 00000004         
  394 00000004         ; Increment Timer for LED Thread
  395 00000004 E59F90C4        ldr              r9, =timer
  396 00000008 E599A000        ldr              r10, [r9]
  397 0000000C E28AA001        add              r10, r10, #1
  398 00000010 E589A000        str              r10, [r9]
  399 00000014 E35A0001        cmp              r10, #1
  400 00000018 0A00001C        beq              else00
  401 0000001C         
  402 0000001C         ; Swap Thread and Load in Registers and Address of Other
                        Thread
  403 0000001C E59F90B0        ldr              r9, =thread
  404 00000020 E599A000        ldr              r10, [r9]
  405 00000024 E35A0000        cmp              r10, #0
  406 00000028 1A00000B        bne              else11
  407 0000002C E59FB0A4        ldr              r11, =led_sp
  408 00000030 E59BC000        ldr              r12, [r11]
  409 00000034 E92C41FF        stmfd            r12!, {r0-r8, lr}
  410 00000038 E58BC000        str              r12, [r11]
  411 0000003C E59FB098        ldr              r11, =calc_sp
  412 00000040 E59BC000        ldr              r12, [r11]
  413 00000044 E8BC41FF        ldmfd            r12!, {r0-r8, lr}
  414 00000048 E58BC000        str              r12, [r11]
  415 0000004C E59BD000        ldr              sp, [r11]
  416 00000050 E92D4000        stmfd            sp!, {lr}   ; the lr will be re
                                                            stored to the pc
  417 00000054 E3A0A001        ldr              r10, =1
  418 00000058 EA00000A        b                endif11
  419 0000005C E59FB078 
                       else11  ldr              r11, =calc_sp
  420 00000060 E59BC000        ldr              r12, [r11]
  421 00000064 E92C41FF        stmfd            r12!, {r0-r8, lr}
  422 00000068 E58BC000        str              r12, [r11]
  423 0000006C E59FB064        ldr              r11, =led_sp
  424 00000070 E59BC000        ldr              r12, [r11]
  425 00000074 E8BC41FF        ldmfd            r12!, {r0-r8, lr}
  426 00000078 E58BC000        str              r12, [r11]
  427 0000007C E59BD000        ldr              sp, [r11]



ARM Macro Assembler    Page 11 


  428 00000080 E92D4000        stmfd            sp!, {lr}   ; the lr will be re
                                                            stored to the pc   
                                                            
  429 00000084 E3A0A000        ldr              r10, =0
  430 00000088 E589A000 
                       endif11 str              r10, [r9]
  431 0000008C EA000008        b                endif00
  432 00000090 E59F903C 
                       else00  ldr              r9, =thread
  433 00000094 E3A0A001        ldr              r10, =1
  434 00000098 E589A000        str              r10, [r9]
  435 0000009C E59FB038        ldr              r11, =calc_sp
  436 000000A0 E59BC000        ldr              r12, [r11]
  437 000000A4 E8BC41FF        ldmfd            r12!, {r0-r8, lr}
  438 000000A8 E58BC000        str              r12, [r11]
  439 000000AC E59BD000        ldr              sp, [r11]
  440 000000B0 E92D4000        stmfd            sp!, {lr}   ; the lr will be re
                                                            stored to the pc 
  441 000000B4         endif00
  442 000000B4         
  443 000000B4         ; this is where we stop the timer from making the interr
                       upt request to the VIC
  444 000000B4         ; i.e. we 'acknowledge' the interrupt
  445 000000B4         
  446 000000B4 E59F9034        ldr              r9, =T0
  447 000000B8 E3A0A001        mov              r10, #TimerResetTimer0Interrupt
  448 000000BC E589A000        str              r10, [r9, #IR] ; remove MR0 int
                                                            errupt request from
                                                             timer
  449 000000C0         
  450 000000C0         ; here we stop the VIC from making the interrupt request
                        to the CPU:
  451 000000C0 E59F902C        ldr              r9, =VIC
  452 000000C4 E3A0A000        mov              r10, #0
  453 000000C8 E589A030        str              r10, [r9, #VectAddr] 
                                                            ; reset VIC
  454 000000CC E8FD8000        ldmfd            sp!, {pc}^
  455 000000D0         
  456 000000D0         
  457 000000D0         
  458 000000D0 00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              E0004000 
              FFFFF000         AREA             LEDS, DATA, READONLY
  459 00000000 00000000 
                       leds    dcd              0x00000000
  460 00000004 00020000        dcd              0x00020000
  461 00000008 00200000        dcd              0x00200000
  462 0000000C 00040000        dcd              0x00040000
  463 00000010 00220000        dcd              0x00220000
  464 00000014 00060000        dcd              0x00060000
  465 00000018 00240000        dcd              0x00240000
  466 0000001C 00260000        dcd              0x00260000



ARM Macro Assembler    Page 12 


  467 00000020         
  468 00000020         
  469 00000020         
  470 00000020                 AREA             CALC, DATA, READONLY
  471 00000000 00      revbits dcb              0x0         ; 0
  472 00000001 08              dcb              0x8         ; 1
  473 00000002 04              dcb              0x4         ; 2
  474 00000003 0C              dcb              0xc         ; 3
  475 00000004 02              dcb              0x2         ; 4
  476 00000005 0A              dcb              0xa         ; 5
  477 00000006 06              dcb              0x6         ; 6
  478 00000007 0E              dcb              0xe         ; 7
  479 00000008 01              dcb              0x1         ; 8
  480 00000009 09              dcb              0x9         ; 9
  481 0000000A 05              dcb              0x5         ; A
  482 0000000B 0D              dcb              0xd         ; B
  483 0000000C 03              dcb              0x3         ; C
  484 0000000D 0B              dcb              0xb         ; D
  485 0000000E 07              dcb              0x7         ; E
  486 0000000F 0F              dcb              0xf         ; F
  487 00000010         
  488 00000010 00700000 
              00000017 buts    dcd              0x00700000, 23 ; 0111
  489 00000018 00B00000 
              00000016         dcd              0x00B00000, 22 ; 1011
  490 00000020 00D00000 
              00000015         dcd              0x00D00000, 21 ; 1101
  491 00000028 00E00000 
              00000014         dcd              0x00E00000, 20 ; 1110
  492 00000030         
  493 00000030         
  494 00000030         
  495 00000030                 AREA             INTERRUPT, DATA, READWRITE
  496 00000000 00000000 
                       thread  dcd              0x00000000
  497 00000004 40002048 
                       led_sp  dcd              0x40002048
  498 00000008 40001024 
                       calc_sp dcd              0x40001024
  499 0000000C 00000000 
                       timer   dcd              0x00000000
  500 00000010         
  501 00000010         
  502 00000010         
  503 00000010                 END
Command Line: --debug --xref --diag_suppress=9931 --apcs=interwork --depend=.\a
pp.d -o.\app.o -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Ke
il_v5\ARM\Inc\Philips --predefine="__EVAL SETA 1" --predefine="__MICROLIB SETA 
1" --predefine="__UVISION_VERSION SETA 516" --list=.\listings\app.lst App.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

InitialisationAndMain 00000000

Symbol: InitialisationAndMain
   Definitions
      At line 1 in file App.s
   Uses
      None
Comment: InitialisationAndMain unused
calc_thread 00000128

Symbol: calc_thread
   Definitions
      At line 150 in file App.s
   Uses
      At line 99 in file App.s
Comment: calc_thread used once
checkallbuts0 00000348

Symbol: checkallbuts0
   Definitions
      At line 343 in file App.s
   Uses
      At line 359 in file App.s
Comment: checkallbuts0 used once
checkallbuts1 00000358

Symbol: checkallbuts1
   Definitions
      At line 348 in file App.s
   Uses
      At line 354 in file App.s
Comment: checkallbuts1 used once
clear_all 00000134

Symbol: clear_all
   Definitions
      At line 184 in file App.s
   Uses
      At line 259 in file App.s
      At line 295 in file App.s

complete_operation 000002B0

Symbol: complete_operation
   Definitions
      At line 298 in file App.s
   Uses
      At line 236 in file App.s
      At line 244 in file App.s

countpress 00000374

Symbol: countpress
   Definitions
      At line 356 in file App.s
   Uses
      At line 352 in file App.s
Comment: countpress used once
dowh1 000000F0



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols


Symbol: dowh1
   Definitions
      At line 132 in file App.s
   Uses
      At line 144 in file App.s
Comment: dowh1 used once
elseifadd0 000001EC

Symbol: elseifadd0
   Definitions
      At line 240 in file App.s
   Uses
      At line 235 in file App.s
Comment: elseifadd0 used once
elseifadd1 00000288

Symbol: elseifadd1
   Definitions
      At line 285 in file App.s
   Uses
      At line 282 in file App.s
Comment: elseifadd1 used once
elseifadd2 000002C8

Symbol: elseifadd2
   Definitions
      At line 305 in file App.s
   Uses
      At line 302 in file App.s
Comment: elseifadd2 used once
elseifallclear0 00000220

Symbol: elseifallclear0
   Definitions
      At line 255 in file App.s
   Uses
      At line 251 in file App.s
Comment: elseifallclear0 used once
elseifclear0 00000208

Symbol: elseifclear0
   Definitions
      At line 248 in file App.s
   Uses
      At line 243 in file App.s
Comment: elseifclear0 used once
elseifclear1 0000029C

Symbol: elseifclear1
   Definitions
      At line 291 in file App.s
   Uses
      At line 288 in file App.s
Comment: elseifclear1 used once
elseiferror2 000002EC

Symbol: elseiferror2
   Definitions



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

      At line 314 in file App.s
   Uses
      At line 304 in file App.s
      At line 309 in file App.s
      At line 312 in file App.s

elseifincr 00000184

Symbol: elseifincr
   Definitions
      At line 208 in file App.s
   Uses
      At line 200 in file App.s
Comment: elseifincr used once
elseifneg0 000001B8

Symbol: elseifneg0
   Definitions
      At line 225 in file App.s
   Uses
      At line 221 in file App.s
Comment: elseifneg0 used once
elseifneg1 00000258

Symbol: elseifneg1
   Definitions
      At line 271 in file App.s
   Uses
      At line 266 in file App.s
Comment: elseifneg1 used once
elseifsub0 000001D0

Symbol: elseifsub0
   Definitions
      At line 232 in file App.s
   Uses
      At line 228 in file App.s
Comment: elseifsub0 used once
elseifsub1 00000274

Symbol: elseifsub1
   Definitions
      At line 279 in file App.s
   Uses
      At line 274 in file App.s
Comment: elseifsub1 used once
elseifsub2 000002DC

Symbol: elseifsub2
   Definitions
      At line 310 in file App.s
   Uses
      At line 307 in file App.s
Comment: elseifsub2 used once
endif0 000003B0

Symbol: endif0
   Definitions
      At line 374 in file App.s



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Relocatable symbols

   Uses
      At line 369 in file App.s
Comment: endif0 used once
endif1 000003AC

Symbol: endif1
   Definitions
      At line 373 in file App.s
   Uses
      At line 371 in file App.s
Comment: endif1 used once
endif2 000003D0

Symbol: endif2
   Definitions
      At line 382 in file App.s
   Uses
      At line 380 in file App.s
Comment: endif2 used once
endif4 0000011C

Symbol: endif4
   Definitions
      At line 143 in file App.s
   Uses
      At line 135 in file App.s
Comment: endif4 used once
get_number 00000194

Symbol: get_number
   Definitions
      At line 214 in file App.s
   Uses
      At line 196 in file App.s
Comment: get_number used once
get_operator 00000230

Symbol: get_operator
   Definitions
      At line 260 in file App.s
   Uses
      At line 217 in file App.s
Comment: get_operator used once
getbut 00000334

Symbol: getbut
   Definitions
      At line 336 in file App.s
   Uses
      At line 193 in file App.s
Comment: getbut used once
keepcounting0 0000038C

Symbol: keepcounting0
   Definitions
      At line 363 in file App.s
   Uses
      At line 373 in file App.s
Comment: keepcounting0 used once



ARM Macro Assembler    Page 5 Alphabetic symbol ordering
Relocatable symbols

keepcounting1 00000390

Symbol: keepcounting1
   Definitions
      At line 365 in file App.s
   Uses
      At line 378 in file App.s
Comment: keepcounting1 used once
led_thread 000000BC

Symbol: led_thread
   Definitions
      At line 111 in file App.s
   Uses
      At line 92 in file App.s
Comment: led_thread used once
loop 000000B8

Symbol: loop
   Definitions
      At line 107 in file App.s
   Uses
      At line 107 in file App.s
Comment: loop used once
main_loop 0000014C

Symbol: main_loop
   Definitions
      At line 192 in file App.s
   Uses
      At line 203 in file App.s
      At line 239 in file App.s
      At line 247 in file App.s
      At line 258 in file App.s
      At line 263 in file App.s
      At line 284 in file App.s
      At line 290 in file App.s
      At line 294 in file App.s

nobutpress 00000344

Symbol: nobutpress
   Definitions
      At line 341 in file App.s
   Uses
      At line 355 in file App.s
      At line 375 in file App.s

start 00000000

Symbol: start
   Definitions
      At line 4 in file App.s
   Uses
      At line 3 in file App.s
Comment: start used once
stop 000002AC

Symbol: stop



ARM Macro Assembler    Page 6 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 296 in file App.s
   Uses
      At line 296 in file App.s
Comment: stop used once
update_leds 000002FC

Symbol: update_leds
   Definitions
      At line 320 in file App.s
   Uses
      At line 190 in file App.s
      At line 207 in file App.s
      At line 212 in file App.s
      At line 224 in file App.s
      At line 231 in file App.s
      At line 254 in file App.s
      At line 270 in file App.s
      At line 278 in file App.s
      At line 316 in file App.s

wh1 000000E0

Symbol: wh1
   Definitions
      At line 128 in file App.s
   Uses
      At line 145 in file App.s
Comment: wh1 used once
38 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

InterruptStuff 00000000

Symbol: InterruptStuff
   Definitions
      At line 387 in file App.s
   Uses
      None
Comment: InterruptStuff unused
else00 00000090

Symbol: else00
   Definitions
      At line 432 in file App.s
   Uses
      At line 400 in file App.s
Comment: else00 used once
else11 0000005C

Symbol: else11
   Definitions
      At line 419 in file App.s
   Uses
      At line 406 in file App.s
Comment: else11 used once
endif00 000000B4

Symbol: endif00
   Definitions
      At line 441 in file App.s
   Uses
      At line 431 in file App.s
Comment: endif00 used once
endif11 00000088

Symbol: endif11
   Definitions
      At line 430 in file App.s
   Uses
      At line 418 in file App.s
Comment: endif11 used once
irqhan 00000000

Symbol: irqhan
   Definitions
      At line 388 in file App.s
   Uses
      At line 52 in file App.s
Comment: irqhan used once
6 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

LEDS 00000000

Symbol: LEDS
   Definitions
      At line 458 in file App.s
   Uses
      None
Comment: LEDS unused
leds 00000000

Symbol: leds
   Definitions
      At line 459 in file App.s
   Uses
      At line 128 in file App.s
Comment: leds used once
2 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

CALC 00000000

Symbol: CALC
   Definitions
      At line 470 in file App.s
   Uses
      None
Comment: CALC unused
buts 00000010

Symbol: buts
   Definitions
      At line 488 in file App.s
   Uses
      At line 344 in file App.s
Comment: buts used once
revbits 00000000

Symbol: revbits
   Definitions
      At line 471 in file App.s
   Uses
      At line 327 in file App.s
Comment: revbits used once
3 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

INTERRUPT 00000000

Symbol: INTERRUPT
   Definitions
      At line 495 in file App.s
   Uses
      None
Comment: INTERRUPT unused
calc_sp 00000008

Symbol: calc_sp
   Definitions
      At line 498 in file App.s
   Uses
      At line 101 in file App.s
      At line 411 in file App.s
      At line 419 in file App.s
      At line 435 in file App.s

led_sp 00000004

Symbol: led_sp
   Definitions
      At line 497 in file App.s
   Uses
      At line 94 in file App.s
      At line 407 in file App.s
      At line 423 in file App.s

thread 00000000

Symbol: thread
   Definitions
      At line 496 in file App.s
   Uses
      At line 403 in file App.s
      At line 432 in file App.s

timer 0000000C

Symbol: timer
   Definitions
      At line 499 in file App.s
   Uses
      At line 125 in file App.s
      At line 132 in file App.s
      At line 395 in file App.s

5 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

IO0CLR E002800C

Symbol: IO0CLR
   Definitions
      At line 115 in file App.s
   Uses
      At line 122 in file App.s
Comment: IO0CLR used once
IO0DIR E0028008

Symbol: IO0DIR
   Definitions
      At line 113 in file App.s
   Uses
      At line 117 in file App.s
Comment: IO0DIR used once
IO0SET E0028004

Symbol: IO0SET
   Definitions
      At line 114 in file App.s
   Uses
      At line 120 in file App.s
Comment: IO0SET used once
IO1CLR E002801C

Symbol: IO1CLR
   Definitions
      At line 154 in file App.s
   Uses
      At line 17 in file App.s
      At line 331 in file App.s

IO1DIR E0028018

Symbol: IO1DIR
   Definitions
      At line 152 in file App.s
   Uses
      At line 12 in file App.s
      At line 180 in file App.s

IO1PIN E0028010

Symbol: IO1PIN
   Definitions
      At line 155 in file App.s
   Uses
      At line 339 in file App.s
Comment: IO1PIN used once
IO1SET E0028014

Symbol: IO1SET
   Definitions
      At line 153 in file App.s
   Uses
      At line 15 in file App.s
      At line 323 in file App.s




ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols

IR 00000000

Symbol: IR
   Definitions
      At line 26 in file App.s
   Uses
      At line 71 in file App.s
      At line 448 in file App.s

IRQslot_en 00000005

Symbol: IRQslot_en
   Definitions
      At line 46 in file App.s
   Uses
      At line 55 in file App.s
Comment: IRQslot_en used once
IntEnable 00000010

Symbol: IntEnable
   Definitions
      At line 39 in file App.s
   Uses
      At line 59 in file App.s
Comment: IntEnable used once
MCR 00000014

Symbol: MCR
   Definitions
      At line 28 in file App.s
   Uses
      At line 77 in file App.s
Comment: MCR used once
MR0 00000018

Symbol: MR0
   Definitions
      At line 29 in file App.s
   Uses
      At line 74 in file App.s
Comment: MR0 used once
Mode_USR 00000010

Symbol: Mode_USR
   Definitions
      At line 20 in file App.s
   Uses
      At line 106 in file App.s
Comment: Mode_USR used once
T0 E0004000

Symbol: T0
   Definitions
      At line 24 in file App.s
   Uses
      At line 65 in file App.s
      At line 446 in file App.s

T1 E0008000



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Absolute symbols


Symbol: T1
   Definitions
      At line 25 in file App.s
   Uses
      None
Comment: T1 unused
TCR 00000004

Symbol: TCR
   Definitions
      At line 27 in file App.s
   Uses
      At line 68 in file App.s
      At line 80 in file App.s

Timer0ChannelNumber 00000004

Symbol: Timer0ChannelNumber
   Definitions
      At line 44 in file App.s
   Uses
      At line 45 in file App.s
      At line 55 in file App.s

Timer0Mask 00000010

Symbol: Timer0Mask
   Definitions
      At line 45 in file App.s
   Uses
      At line 58 in file App.s
Comment: Timer0Mask used once
TimerCommandReset 00000002

Symbol: TimerCommandReset
   Definitions
      At line 31 in file App.s
   Uses
      At line 67 in file App.s
Comment: TimerCommandReset used once
TimerCommandRun 00000001

Symbol: TimerCommandRun
   Definitions
      At line 32 in file App.s
   Uses
      At line 79 in file App.s
Comment: TimerCommandRun used once
TimerModeResetAndInterrupt 00000003

Symbol: TimerModeResetAndInterrupt
   Definitions
      At line 33 in file App.s
   Uses
      At line 76 in file App.s
Comment: TimerModeResetAndInterrupt used once
TimerResetAllInterrupts 000000FF




ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Absolute symbols

Symbol: TimerResetAllInterrupts
   Definitions
      At line 35 in file App.s
   Uses
      At line 70 in file App.s
Comment: TimerResetAllInterrupts used once
TimerResetTimer0Interrupt 00000001

Symbol: TimerResetTimer0Interrupt
   Definitions
      At line 34 in file App.s
   Uses
      At line 447 in file App.s
Comment: TimerResetTimer0Interrupt used once
VIC FFFFF000

Symbol: VIC
   Definitions
      At line 38 in file App.s
   Uses
      At line 50 in file App.s
      At line 451 in file App.s

VectAddr 00000030

Symbol: VectAddr
   Definitions
      At line 40 in file App.s
   Uses
      At line 62 in file App.s
      At line 453 in file App.s

VectAddr0 00000100

Symbol: VectAddr0
   Definitions
      At line 41 in file App.s
   Uses
      At line 53 in file App.s
Comment: VectAddr0 used once
VectCtrl0 00000200

Symbol: VectCtrl0
   Definitions
      At line 42 in file App.s
   Uses
      At line 56 in file App.s
Comment: VectCtrl0 used once
addit 00000016

Symbol: addit
   Definitions
      At line 160 in file App.s
   Uses
      At line 241 in file App.s
      At line 286 in file App.s

allclear FFFFFFE9




ARM Macro Assembler    Page 5 Alphabetic symbol ordering
Absolute symbols

Symbol: allclear
   Definitions
      At line 163 in file App.s
   Uses
      At line 256 in file App.s
      At line 292 in file App.s

clear FFFFFFEA

Symbol: clear
   Definitions
      At line 162 in file App.s
   Uses
      At line 249 in file App.s
Comment: clear used once
decr 00000015

Symbol: decr
   Definitions
      At line 159 in file App.s
   Uses
      At line 201 in file App.s
      At line 226 in file App.s
      At line 272 in file App.s

getnum_state 00000001

Symbol: getnum_state
   Definitions
      At line 167 in file App.s
   Uses
      At line 206 in file App.s
      At line 211 in file App.s
      At line 215 in file App.s
      At line 267 in file App.s
      At line 275 in file App.s

getop_state 00000002

Symbol: getop_state
   Definitions
      At line 168 in file App.s
   Uses
      At line 238 in file App.s
      At line 246 in file App.s
      At line 261 in file App.s

incr 00000014

Symbol: incr
   Definitions
      At line 158 in file App.s
   Uses
      At line 198 in file App.s
      At line 219 in file App.s
      At line 264 in file App.s

initial_state 00000000




ARM Macro Assembler    Page 6 Alphabetic symbol ordering
Absolute symbols

Symbol: initial_state
   Definitions
      At line 166 in file App.s
   Uses
      At line 185 in file App.s
      At line 194 in file App.s

longpress 00030D40

Symbol: longpress
   Definitions
      At line 177 in file App.s
   Uses
      At line 362 in file App.s
Comment: longpress used once
op 00000000

Symbol: op
   Definitions
      At line 171 in file App.s
   Uses
      At line 188 in file App.s
      At line 300 in file App.s

op_add 00000001

Symbol: op_add
   Definitions
      At line 172 in file App.s
   Uses
      At line 245 in file App.s
      At line 289 in file App.s
      At line 305 in file App.s

op_sub 00000002

Symbol: op_sub
   Definitions
      At line 173 in file App.s
   Uses
      At line 237 in file App.s
      At line 283 in file App.s
      At line 310 in file App.s

regpress 00004E20

Symbol: regpress
   Definitions
      At line 176 in file App.s
   Uses
      At line 340 in file App.s
Comment: regpress used once
subtr 00000017

Symbol: subtr
   Definitions
      At line 161 in file App.s
   Uses
      At line 233 in file App.s



ARM Macro Assembler    Page 7 Alphabetic symbol ordering
Absolute symbols

      At line 280 in file App.s

41 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

main 00000000

Symbol: main
   Definitions
      At line 2 in file App.s
   Uses
      None
Comment: main unused
1 symbol
433 symbols in table
